<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows下Latex的配置</title>
    <url>/2020/02/05/Windows%E4%B8%8BLatex%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>最近要搭建一个Latex环境,接下来总结一下安装过程</p>
<a id="more"></a>

<h2 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1. 下载镜像"></a>1. 下载镜像</h2><p> 镜像地址<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/ </a></p>
<p><img src="https://cdn.jsdelivr.net/gh/atufo/picture-store/img/20200205125143.png" alt=""></p>
<p>下载好，直接打开（<strong>不用解压软件</strong>，Win10自动挂载）会进行挂载。</p>
<h2 id="2-安装Texlive环境（含编译器等）"><a href="#2-安装Texlive环境（含编译器等）" class="headerlink" title="2. 安装Texlive环境（含编译器等）"></a>2. 安装Texlive环境（含编译器等）</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>安装目录不能有中文</li>
<li>安装占用6GB左右空间</li>
</ol>
<p>打开后是这个样子，这是同学的电脑。我已经装过，安装包删了，将就一下吧。<img src="D:%5Cblog_git%5Chexo%5Csource_posts%5CWindows%E4%B8%8BLatex%E7%9A%84%E9%85%8D%E7%BD%AE.assets%5C8B36A7DD9696C4E04B4053E960812BCB.jpg" alt=""></p>
<p>然后双击 <strong>install-tl-windows.bat</strong> 进入安装界面。选择一个没有中文的目录即可。然后等待几十分钟，因为这个比较大，有几个G。</p>
<p>其中 <strong>install-tl-advanced.bat</strong> 是<strong>高级安装模式</strong>。如果想改一些东西可以选这个。不知道的话，选</p>
<p><strong>install-tl-windows.bat</strong> 就好了。</p>
<h2 id="3-安装编辑器"><a href="#3-安装编辑器" class="headerlink" title="3.安装编辑器"></a>3.安装编辑器</h2><p><strong>可选</strong>这里使用<strong>TexStudio</strong> <a href="http://texstudio.sourceforge.net/" target="_blank" rel="noopener">下载点这里，进入官网</a></p>
<p><img src="D:%5Cblog_git%5Chexo%5Csource_posts%5CWindows%E4%B8%8BLatex%E7%9A%84%E9%85%8D%E7%BD%AE.assets%5C20200205130532.png" alt=""></p>
<p>先点 Download 然后点 installer。下载安装即可。</p>
<h2 id="4-更改编辑器设置"><a href="#4-更改编辑器设置" class="headerlink" title="4. 更改编辑器设置"></a>4. 更改编辑器设置</h2><h4 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h4><p><img src="D:%5Cblog_git%5Chexo%5Csource_posts%5CWindows%E4%B8%8BLatex%E7%9A%84%E9%85%8D%E7%BD%AE.assets%5C20200205130834.png" alt=""></p>
<h4 id="改成中文"><a href="#改成中文" class="headerlink" title="改成中文"></a>改成中文</h4><p><img src="D:%5Cblog_git%5Chexo%5Csource_posts%5CWindows%E4%B8%8BLatex%E7%9A%84%E9%85%8D%E7%BD%AE.assets%5C20200205131003.png" alt=""></p>
<h4 id="选用XeLaTeX"><a href="#选用XeLaTeX" class="headerlink" title="选用XeLaTeX"></a>选用XeLaTeX</h4><p><img src="D:%5Cblog_git%5Chexo%5Csource_posts%5CWindows%E4%B8%8BLatex%E7%9A%84%E9%85%8D%E7%BD%AE.assets%5C20200205131119.png" alt=""></p>
<h2 id="5-使用"><a href="#5-使用" class="headerlink" title="5. 使用"></a>5. 使用</h2><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>找到模板目录下的 XXX.tex 文件，双击即可。如果打不开，鼠标右击打开方式选择TeXStudio</p>
<p><img src="D:%5Cblog_git%5Chexo%5Csource_posts%5CWindows%E4%B8%8BLatex%E7%9A%84%E9%85%8D%E7%BD%AE.assets%5C20200205131311.png" alt=""></p>
<h4 id="编译使用"><a href="#编译使用" class="headerlink" title="编译使用"></a>编译使用</h4><p>如图操作即可</p>
<p><img src="D:%5Cblog_git%5Chexo%5Csource_posts%5CWindows%E4%B8%8BLatex%E7%9A%84%E9%85%8D%E7%BD%AE.assets%5C20200205131535.png" alt=""></p>
]]></content>
      <tags>
        <tag>latex windows</tag>
      </tags>
  </entry>
  <entry>
    <title>java/对象导论</title>
    <url>/2020/01/08/java/%E5%AF%B9%E8%B1%A1%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="CH1-对象导论"><a href="#CH1-对象导论" class="headerlink" title="CH1 对象导论"></a>CH1 对象导论</h1><p><img src="https://cdn.jsdelivr.net/gh/atufo/picture-store/img/s27243455.jpg" alt="Java编程思想 （第4版）"></p>
<a id="more"></a>

<h2 id="1-1抽象过程"><a href="#1-1抽象过程" class="headerlink" title="1.1抽象过程"></a>1.1抽象过程</h2><ul>
<li>将问题空间中的元素及其在解空间上的表示称为 <strong>对象</strong></li>
<li>面向对象思想实质：程序可以添加新类型的对象<br>使自身适用于某种问题</li>
</ul>
<h2 id="1-2每个对象都有一个接口"><a href="#1-2每个对象都有一个接口" class="headerlink" title="1.2每个对象都有一个接口"></a>1.2每个对象都有一个接口</h2><ul>
<li>创建抽象数据类型（类）是面向对象程序设计的基本概念之一。</li>
<li>类描述了具有相同特性（数据元素）和行为（功能）的对象集合。</li>
<li><strong>接口</strong> 确定了对某一特定对象所能发出来的 <strong>请求</strong><ul>
<li>每一个请求都与一个方法相关联 </li>
<li>满足这些请求的代码与隐藏的数据构成了 <strong>实现</strong></li>
</ul>
</li>
<li>UML（Unified Modelling Language，统一建模语言）<ol>
<li>每个类都用一个方框表示</li>
<li>类名在方框的顶部</li>
<li>数据成员在方框中间</li>
<li>方法在底部</li>
<li>通常只有 <strong>类名和公共方法</strong> 被表示在图中</li>
</ol>
</li>
</ul>
<h2 id="1-3每个对象都提供服务"><a href="#1-3每个对象都提供服务" class="headerlink" title="1.3每个对象都提供服务"></a>1.3每个对象都提供服务</h2><p>当正在试图开发或理解一个程序设计时，最好的方法之一就是 <strong>将对象想像成”服务的提供者“</strong>。去调用或创建可以提供这一服务的对象</p>
<ul>
<li><p>好处： </p>
<pre><code>1.  将问题分解为对象的集合
2.  提高对象 内聚性</code></pre></li>
</ul>
<h2 id="1-4被隐藏的具体实现"><a href="#1-4被隐藏的具体实现" class="headerlink" title="1.4被隐藏的具体实现"></a>1.4被隐藏的具体实现</h2><p>程序开发人员按角色分为 <strong>类创建者</strong> 和 <strong>客户端程序员</strong> 是大有裨益的。</p>
<ul>
<li><p>类创建者的目标是构建类，这种类只向客户端程序员暴露必须的部分而隐藏其他部分。</p>
</li>
<li><p>客户端程序员的目标是 收集各种用来快速应用开发的类。</p>
</li>
<li><p>类访问限制符</p>
<ol>
<li>public</li>
<li>private</li>
<li>protected</li>
<li>default（没有使用上述三者之一，就为默认）</li>
</ol>
</li>
</ul>
<h2 id="1-5复用的具体实现"><a href="#1-5复用的具体实现" class="headerlink" title="1.5复用的具体实现"></a>1.5复用的具体实现</h2><ol>
<li>组合（composition）</li>
<li>继承<br> 优先使用组合</li>
</ol>
<h2 id="1-6-继承（extends）"><a href="#1-6-继承（extends）" class="headerlink" title="1.6 继承（extends）"></a>1.6 继承（extends）</h2><p><img src="https://cdn.jsdelivr.net/gh/atufo/picture-store/img/404_1.png" alt=""></p>
<ul>
<li>导出类必须有其特定的实现，否则继承没有意义。有两种方法可以使二者产生差异<ol>
<li>在导出类中添加新方法</li>
<li><strong>覆盖</strong> （overriding）：改变基类现有方法</li>
</ol>
</li>
</ul>
<h3 id="1-6-1是一个-与-像是一个-关系"><a href="#1-6-1是一个-与-像是一个-关系" class="headerlink" title="1.6.1是一个 与 像是一个 关系"></a>1.6.1是一个 与 像是一个 关系</h3><ol>
<li><strong>是一个( is-a )：</strong> 继承只 <em>覆盖</em> 基类方法。导出类与基类是完全相同的类型，因为他们具有 <em>完全相同</em> 的接口。</li>
<li><strong>像是一个(is-like-a)：</strong> 扩展了接口</li>
</ol>
<h2 id="1-7伴随多态的可互换对象"><a href="#1-7伴随多态的可互换对象" class="headerlink" title="1.7伴随多态的可互换对象"></a>1.7伴随多态的可互换对象</h2><p>在处理类型的层次结构时，经常想把一个对象不当作它所属的特定类型来对待，而是将其当作基类的对象来对待。<br>如此可以写出不依赖特定类型的代码。方法的操作都是 <em>泛化（generic）</em>   的。<br><img src="https://cdn.jsdelivr.net/gh/atufo/picture-store/img/408_1.png" alt=""></p>
<p>此为 <strong>多态</strong> 。面向对象编译器做的是 <em>后期绑定</em> （即运行时才能确定具体代码的地址），而传统编译器做的是 <em>前期绑定</em> 。</p>
<ul>
<li>在 c++中使用 <strong>virtual</strong> 关键字来实现 <em>动态绑定（后期绑定）</em>。而java中动态绑定是默认行为。</li>
</ul>
<h4 id="向上转型（upcasting）"><a href="#向上转型（upcasting）" class="headerlink" title="向上转型（upcasting）"></a>向上转型（upcasting）</h4><p><img src="https://cdn.jsdelivr.net/gh/atufo/picture-store/img/412_1.png" alt=""></p>
<h2 id="1-8-单根继承结构"><a href="#1-8-单根继承结构" class="headerlink" title="1.8 单根继承结构"></a>1.8 单根继承结构</h2><p>在java (事实上还包括除C++外的所有OOP语言)，都继承自一个单一基类，其就是 <strong>Object</strong>。<br>好处: </p>
<pre><code>1. 所有对象都具有一个公用的接口。
2. 单根继承结构保证所有对象都具备某些功能。所有对象都可以容易的再堆上创建，参数传递过程也得到极大简化。
3. 单根继承使得垃圾回收机制实现变得容易的多，而垃圾回收机制正是Java对C++的重要改进之一。</code></pre><h2 id="1-9-容器"><a href="#1-9-容器" class="headerlink" title="1.9 容器"></a>1.9 容器</h2><p>创建另一种对象类型，这种新的对象类型持有对其他对象的引用。其通常被称为容器（集合）。在任何需要的时候都可以扩充自己以容纳你置于其中的东西。因此不需要知道将来会把多少个对象至于容器中，只需要创建一个容器对象，然后让它处理所有细节。</p>
<h3 id="1-9-1参数化类型"><a href="#1-9-1参数化类型" class="headerlink" title="1.9.1参数化类型"></a>1.9.1参数化类型</h3><p>在 JavaSE5 中加入了参数化类型，其被称为泛型。<br>例：<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Shape&gt; shapes=<span class="keyword">new</span> ArrayList&lt;Shape&gt;();</span></pre></td></tr></table></figure><br>ps:在其之前容器中存储的都是通用存储类型Object。这意味着，在取回时得到的是Object类型的引用，为了得到具体类型，就要的 <em>向下转型</em>。这可能是不安全的。</p>
<h2 id="1-10对象的创建和生命期"><a href="#1-10对象的创建和生命期" class="headerlink" title="1.10对象的创建和生命期"></a>1.10对象的创建和生命期</h2><p>在使用对象时，关键的问题之一便是他们的生成和销毁方式。每个对象为了生存都需要资源，尤其是内存。当我们不需要某个对象时，它必须清理掉。</p>
<h4 id="对象存放在何处"><a href="#对象存放在何处" class="headerlink" title="对象存放在何处"></a>对象存放在何处</h4><ol>
<li>堆栈（栈）<br> 这种方式将存储空间分配和释放置于首要地位。有时利于控制但是牺牲了灵活性，因为必须知道对象确切的数量，生存周期和类型。</li>
<li>堆（heap）<br> 这种方式是在被称为堆的内存池中创建对象。这种方式知道运行时才知道要多少对象，它们的生命周期及具体类型。</li>
</ol>
<ul>
<li><p>因为存储空间是在运行时动态管理的，所以需要大量时间在堆中分配存储空间。这远大于在栈中创建存储空间的时间，在栈中存储和释放存储空间分别只需要一条汇编命令即可，分别对应将栈顶指针向下和向上移动。而<br>堆依赖于存储机制。</p>
</li>
<li><p>Java采用了完全动态内存分配的方式。</p>
</li>
<li><p>在栈上的对象，编译器可以确定的存活时间，并可以自动销毁它。</p>
</li>
<li><p>在堆上的对象，编译器对其生命周期一无所知。</p>
</li>
<li><p>Java的垃圾回收器被设计用来处理内存释放问题。这一点得益于 <em>单根继承*和 *只能在堆上创建对象</em> </p>
</li>
</ul>
<h2 id="1-11异常处理：处理错误"><a href="#1-11异常处理：处理错误" class="headerlink" title="1.11异常处理：处理错误"></a>1.11异常处理：处理错误</h2><p>Java内置了异常处理机制</p>
<h2 id="1-12并发编程"><a href="#1-12并发编程" class="headerlink" title="1.12并发编程"></a>1.12并发编程</h2><p>同一时刻处理多个任务。<br>隐患：资源共享<br>解决方法： <strong>锁</strong></p>
<h2 id="1-13-Java与Internet"><a href="#1-13-Java与Internet" class="headerlink" title="1.13 Java与Internet"></a>1.13 Java与Internet</h2><h3 id="1-13-1-web是什么"><a href="#1-13-1-web是什么" class="headerlink" title="1.13.1 web是什么"></a>1.13.1 web是什么</h3><h4 id="客户-服务器模型"><a href="#客户-服务器模型" class="headerlink" title="客户/服务器模型"></a>客户/服务器模型</h4><p>核心思想：系统具有一个中央信息存储池（central repository of infomation）,用来存储某种数据，它通常存在于数据库中，你可以根据需要将它分发给某些人或机器集群。</p>
<ul>
<li>服务器：信息存储池，用于分发信息的软件以及信息及软件所驻留的机器被称为服务器。</li>
<li>客户机：获取处理显示这些信息的机器叫做客户机。</li>
<li>事务处理：保证一个客户插入新的数据不会覆盖另一个客户插入的数据，也不会在插入的过程中丢失。</li>
<li>中间件：将负载分散在服务器端的其他机器。（中间件也被用来提高可维护性）</li>
</ul>
<h2 id="1-14总结"><a href="#1-14总结" class="headerlink" title="1.14总结"></a>1.14总结</h2><p>理解OOP，根据需要选择相应的语言。</p>
]]></content>
  </entry>
  <entry>
    <title>nginx+php-fpm搭建wordpress</title>
    <url>/2020/01/08/nginx-php-fpm%E6%90%AD%E5%BB%BAwordpress/</url>
    <content><![CDATA[<p>先看看效果图</p>
<p><img src="https://cdn.jsdelivr.net/gh/atufo/picture-store/img/20200108125938.png" alt=""></p>
<a id="more"></a>



<h2 id="第一步-安装nginx"><a href="#第一步-安装nginx" class="headerlink" title="第一步 安装nginx"></a>第一步 安装nginx</h2><p>首先下载nginx源码<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx 下载</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.17.7.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tar -xf nginx-1.17.7.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入目录 nginx-1.17.7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">cd  nginx-1.17.7</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> configure</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">./configure</span></pre></td></tr></table></figure>

<p>然后注意，在生成的<strong>objs/Makefile</strong>中去掉 <strong>-Werror</strong> 否则可能编译出错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span></pre></td></tr><tr><td class="code"><pre><span class="line">make install</span></pre></td></tr></table></figure>

<p>最后会安装在 <strong>/usr/local/nginx</strong>中。</p>
<h2 id="第二步-安装-php-fpm"><a href="#第二步-安装-php-fpm" class="headerlink" title="第二步 安装 php-fpm"></a>第二步 安装 php-fpm</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php-fpm</span></pre></td></tr></table></figure>

<p>然后修改监听方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php-fpm7.2 -t</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[08-Jan-2020 12:03:14] NOTICE: configuration file /etc/php/7.2/fpm/php-fpm.conf test is successful</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">其中/etc/php/7.2/fpm/为配置文件路径。修改该路径下pool.d/www.conf,添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">listen = localhost:9000</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">或</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">listen = unix:/run/php-fpm.sock</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启 php-fpm</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/etc/init.d/php7.2-fpm restart</span></pre></td></tr></table></figure>

<h2 id="第三步-修改nginx-conf-连接nginx与php-fpm"><a href="#第三步-修改nginx-conf-连接nginx与php-fpm" class="headerlink" title="第三步 修改nginx.conf,连接nginx与php-fpm"></a>第三步 修改nginx.conf,连接nginx与php-fpm</h2><p>上面的<strong>listen</strong>部分就是二者沟通的桥梁，接下来我们就需要配置<strong>nginx.conf</strong>来让nginx找到php-fpm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在server中添加</span></pre></td></tr><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             root           /var/www/html/wordpress; #wordpress路径在第四步中会说到</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">             fastcgi_pass   localhost:9000;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             fastcgi_index  index.php;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             include        fastcgi_params;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr></table></figure>

<h2 id="第四步-下载wordpress"><a href="#第四步-下载wordpress" class="headerlink" title="第四步 下载wordpress"></a>第四步 下载wordpress</h2><p>【】</p>
]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>php</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown画图</title>
    <url>/2019/12/13/markdown%E7%94%BB%E5%9B%BE/</url>
    <content><![CDATA[<p>Typora本身支持flow、mermaid语言绘制时序图、甘特图、流程图等等。若要你的博客也支持解析渲染这些语言描绘的图表，则需要查看博客框架是否支持，然后进行相关配置。<br>以Hexo为例，原生不支持，但是可以通过安装插件实现以上图表的显示。</p>
<a id="more"></a>

<h2 id="使用flow绘制流程图"><a href="#使用flow绘制流程图" class="headerlink" title="使用flow绘制流程图"></a>使用flow绘制流程图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span></pre></td></tr><tr><td class="code"><pre><span class="line">op&#x3D;&gt;operation: 处理框</span></pre></td></tr><tr><td class="code"><pre><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span></pre></td></tr><tr><td class="code"><pre><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span></pre></td></tr><tr><td class="code"><pre><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span></pre></td></tr><tr><td class="code"><pre><span class="line">e&#x3D;&gt;end: 结束框</span></pre></td></tr><tr><td class="code"><pre><span class="line">st-&gt;op-&gt;cond</span></pre></td></tr><tr><td class="code"><pre><span class="line">cond(yes)-&gt;io-&gt;e</span></pre></td></tr><tr><td class="code"><pre><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span></pre></td></tr></table></figure>
<p><img src="flow.png" alt=""></p>
]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>flow图</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql创建用户</title>
    <url>/2019/12/08/mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<h1 id="向MySQL增加新用户账户"><a href="#向MySQL增加新用户账户" class="headerlink" title="向MySQL增加新用户账户"></a>向MySQL增加新用户账户</h1><p>可以用两种方式创建MySQL账户：</p>
<p>·     使用GRANT语句</p>
<p>·     直接操作MySQL授权表</p>
<a id="more"></a>

<p>最好的方法是使用GRANT语句，因为这样更精确，错误少。从MySQL 3.22.11起提供了GRANT；其语法见<a href="https://www.mysqlzh.com/doc/45/sql-syntax.html#grant" target="_blank" rel="noopener">13.5.1.3节，“GRANT和REVOKE语法”</a>。</p>
<p>创建账户的其它方法是使用MySQL账户管理功能的第三方程序。phpMyAdmin即是一个程序。</p>
<p>下面的示例说明如何使用<strong>MySQL</strong>客户端程序来设置新用户。假定按照<a href="https://www.mysqlzh.com/doc/45/installing.html#default-privileges" target="_blank" rel="noopener">2.9.3节，“使初始MySQL账户安全”</a>描述的 默认值来设置权限。这说明为了更改，你必须以MySQLroot用户连接MySQL服务器，并且root账户必须有mysql数据库的INSERT权限和RELOAD管理权限。</p>
<p>首先，使用<strong>MySQL</strong>程序以MySQL root用户来连接服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; MySQL --user&#x3D;root MySQL</span></pre></td></tr></table></figure>

<p>如果你为root账户指定了密码，还需要为该<strong>MySQL</strong>命令和本节中的其它命令提供–password或-p选项。</p>
<p>以root连接到服务器上后，可以添加新账户。下面的语句使用GRANT来设置四个新账户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;monty&#39;@&#39;localhost&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     IDENTIFIED BY &#39;some_pass&#39; WITH GRANT OPTION;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;monty&#39;@&#39;%&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     IDENTIFIED BY &#39;some_pass&#39; WITH GRANT OPTION;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; GRANT RELOAD,PROCESS ON *.* TO &#39;admin&#39;@&#39;localhost&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; GRANT USAGE ON *.* TO &#39;dummy&#39;@&#39;localhost&#39;;</span></pre></td></tr></table></figure>

<p>用GRANT语句创建的账户有下面的属性：</p>
<p>·     其中两个账户有相同的用户名monty和密码some_pass。两个账户均为超级用户账户，具有完全的权限可以做任何事情。一个账户 (‘monty’@’localhost’)只用于从本机连接时。另一个账户(‘monty’@’%’)可用于从其它主机连接。请注意monty的两个账户必须能从任何主机以monty连接。没有localhost账户，当monty从本机连接时，<strong>mysql_install_db</strong>创建的localhost的匿名用户账户将占先。结果是，monty将被视为匿名用户。原因是匿名用户账户的Host列值比‘monty’@’%’账户更具体，这样在user表排序顺序中排在前面。(user表排序的讨论参见<a href="https://www.mysqlzh.com/doc/45/database-administration.html#connection-access" target="_blank" rel="noopener">5.7.5节，“访问控制, 阶段1：连接核实”</a>）。</p>
<p>·     一个账户有用户名admin，没有密码。该账户只用于从本机连接。授予了RELOAD和PROCESS管理权限。这些权限允许admin用户执行<strong>mysqladmin reload</strong>、<strong>mysqladmin refresh</strong>和<strong>mysqladmin flush-***</strong>xxx*<strong>命令，以及</strong>mysqladmin processlist**。未授予访问数据库的权限。你可以通过GRANT语句添加此类权限。</p>
<p>·     一个账户有用户名dummy，没有密码。该账户只用于从本机连接。未授予权限。通过GRANT语句中的USAGE权限，你可以创建账户而不授予任何权限。它可以将所有全局权限设为’N’。假定你将在以后将具体权限授予该账户。</p>
<p>除了GRANT，你可以直接用INSERT语句创建相同的账户，然后使用FLUSH PRIVILEGES告诉服务器重载授权表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; mysql --user&#x3D;root mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO user</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;localhost&#39;,&#39;monty&#39;,PASSWORD(&#39;some_pass&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     &#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO user</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;%&#39;,&#39;monty&#39;,PASSWORD(&#39;some_pass&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     &#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO user SET Host&#x3D;&#39;localhost&#39;,User&#x3D;&#39;admin&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     Reload_priv&#x3D;&#39;Y&#39;, Process_priv&#x3D;&#39;Y&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO user (Host,User,Password)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;localhost&#39;,&#39;dummy&#39;,&#39;&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span></pre></td></tr></table></figure>

<p>当你用INSERT创建账户时使用FLUSH PRIVILEGES的原因是告诉服务器重读授权表。否则，只有重启服务器后更改方会被注意到。使用 GRANT，则不需要使用FLUSH PRIVILEGES。</p>
<p>用INSERT使用PASSWORD()函数是为了加密密码。GRANT语句为你加密密码，因此不需要PASSWORD()。</p>
<p>‘Y’值启用账户权限。对于admin账户，还可以使用更加可读的INSERT扩充的语法（使用SET）。</p>
<p>在为dummy账户的INSERT语句中，只有user表中的Host、User和Password列记录为指定的值。没有一个权限列为显式设置，因此MySQL将它们均指定为 默认值’N’。这样等同于GRANT USAGE的操作。</p>
<p>请注意要设置超级用户账户，只需要创建一个权限列设置为’Y’的user表条目。user表权限为全局权限，因此其它 授权表不再需要条目。</p>
<p>下面的例子创建3个账户，允许它们访问专用数据库。每个账户的用户名为custom，密码为obscure。</p>
<p>要想用GRANT创建账户，使用下面的语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; MySQL --user&#x3D;root MySQL</span></pre></td></tr><tr><td class="code"><pre><span class="line">shell&gt; mysql --user&#x3D;root mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     ON bankaccount.*</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     TO &#39;custom&#39;@&#39;localhost&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     IDENTIFIED BY &#39;obscure&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     ON expenses.*</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     TO &#39;custom&#39;@&#39;whitehouse.gov&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     IDENTIFIED BY &#39;obscure&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     ON customer.*</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     TO &#39;custom&#39;@&#39;server.domain&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     IDENTIFIED BY &#39;obscure&#39;;</span></pre></td></tr></table></figure>

<p>这3个账户可以用于：</p>
<p>·     第1个账户可以访问bankaccount数据库，但只能从本机访问。</p>
<p>·     第2个账户可以访问expenses数据库，但只能从主机whitehouse.gov访问。</p>
<p>·     第3个账户可以访问customer数据库，但只能从主机server.domain访问。</p>
<p>要想不用GRANT设置custom账户，使用INSERT语句直接修改 授权表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; mysql --user&#x3D;root mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO user (Host,User,Password)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;localhost&#39;,&#39;custom&#39;,PASSWORD(&#39;obscure&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO user (Host,User,Password)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;whitehouse.gov&#39;,&#39;custom&#39;,PASSWORD(&#39;obscure&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO user (Host,User,Password)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;server.domain&#39;,&#39;custom&#39;,PASSWORD(&#39;obscure&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO db</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     (Host,Db,User,Select_priv,Insert_priv,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     Update_priv,Delete_priv,Create_priv,Drop_priv)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;localhost&#39;,&#39;bankaccount&#39;,&#39;custom&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     &#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO db</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     (Host,Db,User,Select_priv,Insert_priv,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     Update_priv,Delete_priv,Create_priv,Drop_priv)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;whitehouse.gov&#39;,&#39;expenses&#39;,&#39;custom&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     &#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO db</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     (Host,Db,User,Select_priv,Insert_priv,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     Update_priv,Delete_priv,Create_priv,Drop_priv)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;server.domain&#39;,&#39;customer&#39;,&#39;custom&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     &#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span></pre></td></tr></table></figure>

<p>前3个INSERT语句在user表中加入条目，允许用户custom从各种主机用给定的密码进行连接，但不授予全局权限(所有权限设置为 默认值’N’)。后面3个INSERT语句在user表中加入条目，为custom授予bankaccount、expenses和customer数据库权限，但只能从合适的主机访问。通常若直接修改 授权表，则应告诉服务器用FLUSH PRIVILEGES重载授权表，使权限更改生效。</p>
<p>如果你想要让某个用户从给定域的所有机器访问(例如，mydomain.com)，你可以在账户名的主机部分使用含‘%’通配符的GRANT语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     ON *.*</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     TO &#39;myname&#39;@&#39;%.mydomain.com&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     IDENTIFIED BY &#39;mypass&#39;;</span></pre></td></tr></table></figure>

<p>要想通过直接修改授权表来实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO user (Host,User,Password,...)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;     VALUES(&#39;%.mydomain.com&#39;,&#39;myname&#39;,PASSWORD(&#39;mypass&#39;),...);</span></pre></td></tr></table></figure>

<p>mysql&gt; <strong>FLUSH PRIVILEGES;</strong></p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>在配置过wsl的VScode中配置PYthon环境</title>
    <url>/2019/12/06/%E5%9C%A8%E9%85%8D%E7%BD%AE%E8%BF%87wsl%E7%9A%84VScode%E4%B8%AD%E9%85%8D%E7%BD%AEPYthon%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>liunx的shell不是Windows能比的，但是windows推出了WSL</p>
<a id="more"></a>

<h3 id="什么是wsl"><a href="#什么是wsl" class="headerlink" title="什么是wsl"></a>什么是wsl</h3><p> Windows Subsystem for Linux（简称WSL）是一个在Windows 10上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。它是由微软与Canonical公司合作开发，其目标是使纯正的Ubuntu 14.04 “Trusty Tahr”映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。 </p>
<h3 id="配置python环境"><a href="#配置python环境" class="headerlink" title="配置python环境"></a>配置python环境</h3><p>一般来说在VScode中选择了wsl作为默认终端。如果想使用windows下的python，可谓是有点麻烦了。</p>
<p>那么下面介绍下如何操作。</p>
<ul>
<li><p>配置 <strong>setting.json</strong></p>
<p>这个文件在 <strong>.vscode</strong> 目录下。</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样每次打开这个项目就会使用 <strong>powershell</strong> 作为终端。</p>
<ul>
<li>安装python插件</li>
</ul>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>python</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>大型网站架构技术演进</title>
    <url>/2019/12/05/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/</url>
    <content><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文以淘宝作为例子，介绍从一百个到千万级并发情况下服务端的架构的演进过程，同时列举出每个演进阶段会遇到的相关技术，让大家对架构的演进有一个整体的认知，文章最后汇总了一些架构设计的原则。</p>
<blockquote>
<p><strong>特别说明：本文以淘宝为例仅仅是为了便于说明演进过程可能遇到的问题，并非是淘宝真正的技术演进路径</strong></p>
</blockquote>
<a id="more"></a>

<h1 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2. 基本概念"></a>2. 基本概念</h1><p>在介绍架构之前，为了避免部分读者对架构设计中的一些概念不了解，下面对几个最基础的概念进行介绍：</p>
<ul>
<li><strong>分布式</strong><br>系统中的多个模块在不同服务器上部署，即可称为分布式系统，如Tomcat和数据库分别部署在不同的服务器上，或两个相同功能的Tomcat分别部署在不同服务器上</li>
<li><strong>高可用</strong><br>系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性</li>
<li><strong>集群</strong><br>一个特定领域的软件部署在多台服务器上并作为一个整体提供一类服务，这个整体称为集群。如Zookeeper中的Master和Slave分别部署在多台服务器上，共同组成一个整体提供集中配置服务。在常见的集群中，客户端往往能够连接任意一个节点获得服务，并且当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，这时候说明集群具有高可用性</li>
<li><strong>负载均衡</strong><br>请求发送到系统时，通过某些方式把请求均匀分发到多个节点上，使系统中每个节点能够均匀的处理请求负载，则可认为系统是负载均衡的</li>
<li><strong>正向代理和反向代理</strong><br>系统内部要访问外部网络时，统一通过一个代理服务器把请求转发出去，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；当外部请求进入系统时，代理服务器把该请求转发到系统中的某台服务器上，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。简单来说，正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程。</li>
</ul>
<h1 id="3-架构演进"><a href="#3-架构演进" class="headerlink" title="3. 架构演进"></a>3. 架构演进</h1><h2 id="3-1-单机架构"><a href="#3-1-单机架构" class="headerlink" title="3.1 单机架构"></a>3.1 单机架构</h2><p><img src="1.webp" alt=""></p>
<p>以淘宝作为例子。在网站最初时，应用数量与用户数都较少，可以把Tomcat和数据库部署在同一台服务器上。浏览器往<a href="http://www.taobao.com发起请求时，首先经过DNS服务器（域名系统）把域名转换为实际IP地址10.102.4.1，浏览器转而访问该IP对应的Tomcat。" target="_blank" rel="noopener">www.taobao.com发起请求时，首先经过DNS服务器（域名系统）把域名转换为实际IP地址10.102.4.1，浏览器转而访问该IP对应的Tomcat。</a></p>
<blockquote>
<p><strong>随着用户数的增长，Tomcat和数据库之间竞争资源，单机性能不足以支撑业务</strong></p>
</blockquote>
<h2 id="3-2-第一次演进：Tomcat与数据库分开部署"><a href="#3-2-第一次演进：Tomcat与数据库分开部署" class="headerlink" title="3.2 第一次演进：Tomcat与数据库分开部署"></a>3.2 第一次演进：Tomcat与数据库分开部署</h2><p><img src="2.webp" alt=""></p>
<p>Tomcat和数据库分别独占服务器资源，显著提高两者各自性能。</p>
<blockquote>
<p><strong>随着用户数的增长，并发读写数据库成为瓶颈</strong></p>
</blockquote>
<h2 id="3-3-第二次演进：引入本地缓存和分布式缓存"><a href="#3-3-第二次演进：引入本地缓存和分布式缓存" class="headerlink" title="3.3 第二次演进：引入本地缓存和分布式缓存"></a>3.3 第二次演进：引入本地缓存和分布式缓存</h2><p><img src="3.webp" alt=""></p>
<p>在Tomcat同服务器上或同JVM中增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的html页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力。其中涉及的技术包括：使用memcached作为本地缓存，使用Redis作为分布式缓存，还会涉及缓存一致性、缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题。</p>
<blockquote>
<p><strong>缓存抗住了大部分的访问请求，随着用户数的增长，并发压力主要落在单机的Tomcat上，响应逐渐变慢</strong></p>
</blockquote>
<h2 id="3-4-第三次演进：引入反向代理实现负载均衡"><a href="#3-4-第三次演进：引入反向代理实现负载均衡" class="headerlink" title="3.4 第三次演进：引入反向代理实现负载均衡"></a>3.4 第三次演进：引入反向代理实现负载均衡</h2><p><img src="4.webp" alt=""></p>
<p>在多台服务器上分别部署Tomcat，使用反向代理软件（Nginx）把请求均匀分发到每个Tomcat中。此处假设Tomcat最多支持100个并发，Nginx最多支持50000个并发，那么理论上Nginx把请求分发到500个Tomcat上，就能抗住50000个并发。其中涉及的技术包括：Nginx、HAProxy，两者都是工作在网络第七层的反向代理软件，主要支持http协议，还会涉及session共享、文件上传下载的问题。</p>
<blockquote>
<p><strong>反向代理使应用服务器可支持的并发量大大增加，但并发量的增长也意味着更多请求穿透到数据库，单机的数据库最终成为瓶颈</strong></p>
</blockquote>
<h2 id="3-5-第四次演进：数据库读写分离"><a href="#3-5-第四次演进：数据库读写分离" class="headerlink" title="3.5 第四次演进：数据库读写分离"></a>3.5 第四次演进：数据库读写分离</h2><p><img src="5.jpg" alt=""></p>
<p>把数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库，对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据。其中涉及的技术包括：Mycat，它是数据库中间件，可通过它来组织数据库的分离读写和分库分表，客户端通过它来访问下层数据库，还会涉及数据同步，数据一致性的问题。</p>
<blockquote>
<p><strong>业务逐渐变多，不同业务之间的访问量差距较大，不同业务直接竞争数据库，相互影响性能</strong></p>
</blockquote>
<h2 id="3-6-第五次演进：数据库按业务分库"><a href="#3-6-第五次演进：数据库按业务分库" class="headerlink" title="3.6 第五次演进：数据库按业务分库"></a>3.6 第五次演进：数据库按业务分库</h2><p><img src="6.webp" alt=""></p>
<p>把不同业务的数据保存到不同的数据库中，使业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑。这样同时导致跨业务的表无法直接做关联分析，需要通过其他途径来解决，但这不是本文讨论的重点，有兴趣的可以自行搜索解决方案。</p>
<blockquote>
<p><strong>随着用户数的增长，单机的写库会逐渐会达到性能瓶颈</strong></p>
</blockquote>
<h2 id="3-7-第六次演进：把大表拆分为小表"><a href="#3-7-第六次演进：把大表拆分为小表" class="headerlink" title="3.7 第六次演进：把大表拆分为小表"></a>3.7 第六次演进：把大表拆分为小表</h2><p><img src="7.webp" alt=""></p>
<p>比如针对评论数据，可按照商品ID进行hash，路由到对应的表中存储；针对支付记录，可按照小时创建表，每个小时表继续拆分为小表，使用用户ID或记录编号来路由数据。只要实时操作的表数据量足够小，请求能够足够均匀的分发到多台服务器上的小表，那数据库就能通过水平扩展的方式来提高性能。其中前面提到的Mycat也支持在大表拆分为小表情况下的访问控制。</p>
<p>这种做法显著的增加了数据库运维的难度，对DBA的要求较高。数据库设计到这种结构时，已经可以称为分布式数据库，但是这只是一个逻辑的数据库整体，数据库里不同的组成部分是由不同的组件单独来实现的，如分库分表的管理和请求分发，由Mycat实现，SQL的解析由单机的数据库实现，读写分离可能由网关和消息队列来实现，查询结果的汇总可能由数据库接口层来实现等等，这种架构其实是MPP（大规模并行处理）架构的一类实现。</p>
<p>目前开源和商用都已经有不少MPP数据库，开源中比较流行的有Greenplum、TiDB、Postgresql XC、HAWQ等，商用的如南大通用的GBase、睿帆科技的雪球DB、华为的LibrA等等，不同的MPP数据库的侧重点也不一样，如TiDB更侧重于分布式OLTP场景，Greenplum更侧重于分布式OLAP场景，这些MPP数据库基本都提供了类似Postgresql、Oracle、MySQL那样的SQL标准支持能力，能把一个查询解析为分布式的执行计划分发到每台机器上并行执行，最终由数据库本身汇总数据进行返回，也提供了诸如权限管理、分库分表、事务、数据副本等能力，并且大多能够支持100个节点以上的集群，大大降低了数据库运维的成本，并且使数据库也能够实现水平扩展。</p>
<blockquote>
<p><strong>数据库和Tomcat都能够水平扩展，可支撑的并发大幅提高，随着用户数的增长，最终单机的Nginx会成为瓶颈</strong></p>
</blockquote>
<h2 id="3-8-第七次演进：使用LVS或F5来使多个Nginx负载均衡"><a href="#3-8-第七次演进：使用LVS或F5来使多个Nginx负载均衡" class="headerlink" title="3.8 第七次演进：使用LVS或F5来使多个Nginx负载均衡"></a>3.8 第七次演进：使用LVS或F5来使多个Nginx负载均衡</h2><p><img src="8.webp" alt=""></p>
<p>由于瓶颈在Nginx，因此无法通过两层的Nginx来实现多个Nginx的负载均衡。图中的LVS和F5是工作在网络第四层的负载均衡解决方案，其中LVS是软件，运行在操作系统内核态，可对TCP请求或更高层级的网络协议进行转发，因此支持的协议更丰富，并且性能也远高于Nginx，可假设单机的LVS可支持几十万个并发的请求转发；F5是一种负载均衡硬件，与LVS提供的能力类似，性能比LVS更高，但价格昂贵。由于LVS是单机版的软件，若LVS所在服务器宕机则会导致整个后端系统都无法访问，因此需要有备用节点。可使用keepalived软件模拟出虚拟IP，然后把虚拟IP绑定到多台LVS服务器上，浏览器访问虚拟IP时，会被路由器重定向到真实的LVS服务器，当主LVS服务器宕机时，keepalived软件会自动更新路由器中的路由表，把虚拟IP重定向到另外一台正常的LVS服务器，从而达到LVS服务器高可用的效果。</p>
<p>此处需要注意的是，上图中从Nginx层到Tomcat层这样画并不代表全部Nginx都转发请求到全部的Tomcat，在实际使用时，可能会是几个Nginx下面接一部分的Tomcat，这些Nginx之间通过keepalived实现高可用，其他的Nginx接另外的Tomcat，这样可接入的Tomcat数量就能成倍的增加。</p>
<blockquote>
<p><strong>由于LVS也是单机的，随着并发数增长到几十万时，LVS服务器最终会达到瓶颈，此时用户数达到千万甚至上亿级别，用户分布在不同的地区，与服务器机房距离不同，导致了访问的延迟会明显不同</strong></p>
</blockquote>
<h2 id="3-9-第八次演进：通过DNS轮询实现机房间的负载均衡"><a href="#3-9-第八次演进：通过DNS轮询实现机房间的负载均衡" class="headerlink" title="3.9 第八次演进：通过DNS轮询实现机房间的负载均衡"></a>3.9 第八次演进：通过DNS轮询实现机房间的负载均衡</h2><p><img src="9.webp" alt=""></p>
<p>在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。当用户访问<a href="http://www.taobao.com时，DNS服务器会使用轮询策略或其他策略，来选择某个IP供用户访问。此方式能实现机房间的负载均衡，至此，系统可做到机房级别的水平扩展，千万级到亿级的并发量都可通过增加机房来解决，系统入口处的请求并发量不再是问题。" target="_blank" rel="noopener">www.taobao.com时，DNS服务器会使用轮询策略或其他策略，来选择某个IP供用户访问。此方式能实现机房间的负载均衡，至此，系统可做到机房级别的水平扩展，千万级到亿级的并发量都可通过增加机房来解决，系统入口处的请求并发量不再是问题。</a></p>
<blockquote>
<p><strong>随着数据的丰富程度和业务的发展，检索、分析等需求越来越丰富，单单依靠数据库无法解决如此丰富的需求</strong></p>
</blockquote>
<h2 id="3-10-第九次演进：引入NoSQL数据库和搜索引擎等技术"><a href="#3-10-第九次演进：引入NoSQL数据库和搜索引擎等技术" class="headerlink" title="3.10 第九次演进：引入NoSQL数据库和搜索引擎等技术"></a>3.10 第九次演进：引入NoSQL数据库和搜索引擎等技术</h2><p><img src="10.webp" alt=""></p>
<p>当数据库中的数据多到一定规模时，数据库就不适用于复杂的查询了，往往只能满足普通查询的场景。对于统计报表场景，在数据量大时不一定能跑出结果，而且在跑复杂查询时会导致其他查询变慢，对于全文检索、可变数据结构等场景，数据库天生不适用。因此需要针对特定的场景，引入合适的解决方案。如对于海量文件存储，可通过分布式文件系统HDFS解决，对于key value类型的数据，可通过HBase和Redis等方案解决，对于全文检索场景，可通过搜索引擎如ElasticSearch解决，对于多维分析场景，可通过Kylin或Druid等方案解决。</p>
<p>当然，引入更多组件同时会提高系统的复杂度，不同的组件保存的数据需要同步，需要考虑一致性的问题，需要有更多的运维手段来管理这些组件等。</p>
<blockquote>
<p><strong>引入更多组件解决了丰富的需求，业务维度能够极大扩充，随之而来的是一个应用中包含了太多的业务代码，业务的升级迭代变得困难</strong></p>
</blockquote>
<h2 id="3-11-第十次演进：大应用拆分为小应用"><a href="#3-11-第十次演进：大应用拆分为小应用" class="headerlink" title="3.11 第十次演进：大应用拆分为小应用"></a>3.11 第十次演进：大应用拆分为小应用</h2><p><img src="11.webp" alt=""></p>
<p>按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心Zookeeper来解决。</p>
<blockquote>
<p><strong>不同应用之间存在共用的模块，由应用单独管理会导致相同代码存在多份，导致公共功能升级时全部应用代码都要跟着升级</strong></p>
</blockquote>
<h2 id="3-12-第十一次演进：复用的功能抽离成微服务"><a href="#3-12-第十一次演进：复用的功能抽离成微服务" class="headerlink" title="3.12 第十一次演进：复用的功能抽离成微服务"></a>3.12 第十一次演进：复用的功能抽离成微服务</h2><p><img src="12.webp" alt=""></p>
<p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来形成一个单独的服务来管理，这样的服务就是所谓的微服务，应用和服务之间通过HTTP、TCP或RPC请求等多种方式来访问公共服务，每个单独的服务都可以由单独的团队来管理。此外，可以通过Dubbo、SpringCloud等框架实现服务治理、限流、熔断、降级等功能，提高服务的稳定性和可用性。</p>
<blockquote>
<p><strong>不同服务的接口访问方式不同，应用代码需要适配多种访问方式才能使用服务，此外，应用访问服务，服务之间也可能相互访问，调用链将会变得非常复杂，逻辑变得混乱</strong></p>
</blockquote>
<h2 id="3-13-第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"><a href="#3-13-第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异" class="headerlink" title="3.13 第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"></a>3.13 第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异</h2><p><img src="13.webp" alt=""></p>
<p>通过ESB统一进行访问协议转换，应用统一通过ESB来访问后端服务，服务与服务之间也通过ESB来相互调用，以此降低系统的耦合程度。这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来解除服务之间耦合问题的架构，就是所谓的SOA（面向服务）架构，这种架构与微服务架构容易混淆，因为表现形式十分相似。个人理解，微服务架构更多是指把系统里的公共服务抽取出来单独运维管理的思想，而SOA架构则是指一种拆分服务并使服务接口访问变得统一的架构思想，SOA架构中包含了微服务的思想。</p>
<blockquote>
<p><strong>业务不断发展，应用和服务都会不断变多，应用和服务的部署变得复杂，同一台服务器上部署多个服务还要解决运行环境冲突的问题，此外，对于如大促这类需要动态扩缩容的场景，需要水平扩展服务的性能，就需要在新增的服务上准备运行环境，部署服务等，运维将变得十分困难</strong></p>
</blockquote>
<h2 id="3-14-第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理"><a href="#3-14-第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理" class="headerlink" title="3.14 第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理"></a>3.14 第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理</h2><p><img src="14.webp" alt=""></p>
<p>目前最流行的容器化技术是Docker，最流行的容器管理服务是Kubernetes(K8S)，应用/服务可以打包为Docker镜像，通过K8S来动态分发和部署镜像。Docker镜像可理解为一个能运行你的应用/服务的最小的操作系统，里面放着应用/服务的运行代码，运行环境根据实际的需要设置好。把整个“操作系统”打包为一个镜像后，就可以分发到需要部署相关服务的机器上，直接启动Docker镜像就可以把服务起起来，使服务的部署和运维变得简单。</p>
<p>在大促的之前，可以在现有的机器集群上划分出服务器来启动Docker镜像，增强服务的性能，大促过后就可以关闭镜像，对机器上的其他服务不造成影响（在3.14节之前，服务运行在新增机器上需要修改系统配置来适配服务，这会导致机器上其他服务需要的运行环境被破坏）。</p>
<blockquote>
<p><strong>使用容器化技术后服务动态扩缩容问题得以解决，但是机器还是需要公司自身来管理，在非大促的时候，还是需要闲置着大量的机器资源来应对大促，机器自身成本和运维成本都极高，资源利用率低</strong></p>
</blockquote>
<h2 id="3-15-第十四次演进：以云平台承载系统"><a href="#3-15-第十四次演进：以云平台承载系统" class="headerlink" title="3.15 第十四次演进：以云平台承载系统"></a>3.15 第十四次演进：以云平台承载系统</h2><p><img src="15.webp" alt=""></p>
<p>系统可部署到公有云上，利用公有云的海量机器资源，解决动态硬件资源的问题，在大促的时间段里，在云平台中临时申请更多的资源，结合Docker和K8S来快速部署服务，在大促结束后释放资源，真正做到按需付费，资源利用率大大提高，同时大大降低了运维成本。</p>
<p>所谓的云平台，就是把海量机器资源，通过统一的资源管理，抽象为一个资源整体，在之上可按需动态申请硬件资源（如CPU、内存、网络等），并且之上提供通用的操作系统，提供常用的技术组件（如Hadoop技术栈，MPP数据库等）供用户使用，甚至提供开发好的应用，用户不需要关系应用内部使用了什么技术，就能够解决需求（如音视频转码服务、邮件服务、个人博客等）。在云平台中会涉及如下几个概念：</p>
<ul>
<li><strong>IaaS：</strong>基础设施即服务。对应于上面所说的机器资源统一为资源整体，可动态申请硬件资源的层面；</li>
<li><strong>PaaS：</strong>平台即服务。对应于上面所说的提供常用的技术组件方便系统的开发和维护；</li>
<li><strong>SaaS：</strong>软件即服务。对应于上面所说的提供开发好的应用或服务，按功能或性能要求付费。</li>
</ul>
<blockquote>
<p><strong>至此，以上所提到的从高并发访问问题，到服务的架构和系统实施的层面都有了各自的解决方案，但同时也应该意识到，在上面的介绍中，其实是有意忽略了诸如跨机房数据同步、分布式事务实现等等的实际问题，这些问题以后有机会再拿出来单独讨论</strong></p>
</blockquote>
<h1 id="4-架构设计总结"><a href="#4-架构设计总结" class="headerlink" title="4. 架构设计总结"></a>4. 架构设计总结</h1><ul>
<li><strong>架构的调整是否必须按照上述演变路径进行？</strong><br>不是的，以上所说的架构演变顺序只是针对某个侧面进行单独的改进，在实际场景中，可能同一时间会有几个问题需要解决，或者可能先达到瓶颈的是另外的方面，这时候就应该按照实际问题实际解决。如在政府类的并发量可能不大，但业务可能很丰富的场景，高并发就不是重点解决的问题，此时优先需要的可能会是丰富需求的解决方案。</li>
<li><strong>对于将要实施的系统，架构应该设计到什么程度？</strong><br>对于单次实施并且性能指标明确的系统，架构设计到能够支持系统的性能指标要求就足够了，但要留有扩展架构的接口以便不备之需。对于不断发展的系统，如电商平台，应设计到能满足下一阶段用户量和性能指标要求的程度，并根据业务的增长不断的迭代升级架构，以支持更高的并发和更丰富的业务。</li>
<li><strong>服务端架构和大数据架构有什么区别？</strong><br>所谓的“大数据”其实是海量数据采集清洗转换、数据存储、数据分析、数据服务等场景解决方案的一个统称，在每一个场景都包含了多种可选的技术，如数据采集有Flume、Sqoop、Kettle等，数据存储有分布式文件系统HDFS、FastDFS，NoSQL数据库HBase、MongoDB等，数据分析有Spark技术栈、机器学习算法等。总的来说大数据架构就是根据业务的需求，整合各种大数据组件组合而成的架构，一般会提供分布式存储、分布式计算、多维分析、数据仓库、机器学习算法等能力。而服务端架构更多指的是应用组织层面的架构，底层能力往往是由大数据架构来提供。</li>
<li><strong>有没有一些架构设计的原则？</strong><ul>
<li>N+1设计。系统中的每个组件都应做到没有单点故障；</li>
<li>回滚设计。确保系统可以向前兼容，在系统升级时应能有办法回滚版本；</li>
<li>禁用设计。应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；</li>
<li>监控设计。在设计阶段就要考虑监控的手段；</li>
<li>多活数据中心设计。若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；</li>
<li>采用成熟的技术。刚开发的或开源的技术往往存在很多隐藏的bug，出了问题没有商业支持可能会是一个灾难；</li>
<li>资源隔离设计。应避免单一业务占用全部资源；</li>
<li>架构应能水平扩展。系统只有做到能水平扩展，才能有效避免瓶颈问题；</li>
<li>非核心则购买。非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；</li>
<li>使用商用硬件。商用硬件能有效降低硬件故障的机率；</li>
<li>快速迭代。系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；</li>
<li>无状态设计。服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。</li>
</ul>
</li>
</ul>
<h4 id="转载原文：https-segmentfault-com-a-1190000018626163"><a href="#转载原文：https-segmentfault-com-a-1190000018626163" class="headerlink" title="转载原文：https://segmentfault.com/a/1190000018626163"></a>转载原文：<a href="https://segmentfault.com/a/1190000018626163" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018626163</a></h4>]]></content>
      <tags>
        <tag>架构</tag>
        <tag>分布式</tag>
        <tag>高并发</tag>
        <tag>服务端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
 <a id="more"></a> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>git使用入门</title>
    <url>/2019/12/05/git%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h3><p>Git是目前世界上最先进的分布式版本控制系统。</p>
<a id="more"></a>

<p>如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：</p>
<p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样：</p>
<p><img src="doc.png" alt="lots-of-docs"></p>
<p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p>
<p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p>
<p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p>
<p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p>
<p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p>
<table>
<thead>
<tr>
<th align="left">版本</th>
<th align="left">文件名</th>
<th align="left">用户</th>
<th align="left">说明</th>
<th align="left">日期</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">service.doc</td>
<td align="left">张三</td>
<td align="left">删除了软件服务条款5</td>
<td align="left">7/12 10:38</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">service.doc</td>
<td align="left">张三</td>
<td align="left">增加了License人数限制</td>
<td align="left">7/12 18:09</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">service.doc</td>
<td align="left">李四</td>
<td align="left">财务部门调整了合同金额</td>
<td align="left">7/13 9:51</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">service.doc</td>
<td align="left">张三</td>
<td align="left">延长了免费升级周期</td>
<td align="left">7/14 15:17</td>
</tr>
</tbody></table>
<p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="方式一-克隆仓库"><a href="#方式一-克隆仓库" class="headerlink" title="方式一    克隆仓库"></a>方式一    克隆仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:name/res.git</span></pre></td></tr></table></figure>
<p>这种 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 的方式需要配置ssh密钥，不过不用在每次提交时输入密码，比较方便</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ATUFO/blogBackup.git</span></pre></td></tr></table></figure>

<p>这种方式需要输入密码。</p>
<h4 id="方式二-初始化本地化仓库，然后加入远程仓库"><a href="#方式二-初始化本地化仓库，然后加入远程仓库" class="headerlink" title="方式二    初始化本地化仓库，然后加入远程仓库"></a>方式二    初始化本地化仓库，然后加入远程仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init #初始化仓库</span></pre></td></tr><tr><td class="code"><pre><span class="line">git add . #添加本地文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">git commit -m "first commit" #提交信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:name/res.git  #添加远程仓库</span></pre></td></tr><tr><td class="code"><pre><span class="line">git push -u origin master #推到远程仓库</span></pre></td></tr></table></figure>

<h4 id="方式三-初始化本地化仓库，然后加入远程仓库"><a href="#方式三-初始化本地化仓库，然后加入远程仓库" class="headerlink" title="方式三    初始化本地化仓库，然后加入远程仓库"></a>方式三    初始化本地化仓库，然后加入远程仓库</h4><p>和方式二差不多，只是这种凡是针对于已有的本地仓库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:name/res.git </span></pre></td></tr><tr><td class="code"><pre><span class="line">git push -u origin master</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>安装bbr,加速网络</title>
    <url>/2019/12/04/%E5%AE%89%E8%A3%85bbr-%E5%8A%A0%E9%80%9F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p><a href="https://www.bwgyhw.cn/bandwagonhost-bbr-speed-up/" target="_blank" rel="noopener">来源</a></p>
<h2 id="什么是bbr"><a href="#什么是bbr" class="headerlink" title="什么是bbr"></a><strong>什么是bbr</strong></h2><p>bbr是谷歌开源的一个TCP拥塞控制算法，并且完全开源，谷歌bbr项目地址：<a href="https://github.com/google/bbr。" target="_blank" rel="noopener">https://github.com/google/bbr。</a></p>
<p>bbr的目的就是尽量跑满带宽，通过控制算法，将带宽利用到最大，并且已经提交至Linux内核，开启非常方便，项目也一直在维护调优，加速效果好，稳定。</p>
<a id="more"></a>



<h2 id="搬瓦工自带bbr的系统"><a href="#搬瓦工自带bbr的系统" class="headerlink" title="搬瓦工自带bbr的系统"></a><strong>搬瓦工自带bbr的系统</strong></h2><p><strong>搬瓦工的默认系统是自带bbr加速的</strong>，也就是说如果你新买了一台搬瓦工vps，那么你的搬瓦工是默认自带bbr的。查看你的搬瓦工vps是什么系统，可以在kiwivm控制面板里的Main controls里查看，搬瓦工如何登陆kiwivm查看本站之前的教程：</p>
<blockquote>
<p><a href="https://www.bwgyhw.cn/bandwagonhost-kiwivm-control-panel-login/" target="_blank" rel="noopener">搬瓦工如何登陆到kiwivm控制面板</a></p>
</blockquote>
<p>如果你的系统是不带bbr的，你也可以简单的切换系统到自带bbr的系统，搬瓦工如何切换系统可以查看本站之前的教程：</p>
<blockquote>
<p><a href="https://www.bwgyhw.cn/bandwagonhost-how-to-change-os/" target="_blank" rel="noopener">如何查看搬瓦工VPS的系统？如何更换搬瓦工系统版本？</a></p>
</blockquote>
<p>搬瓦工自带bbr的系统有centos 6和centos 7，如下图所示，系统名称后面有<strong>-bbr后缀</strong>的则表示为自带bbr加速的系统：</p>
<p><img src="https://www.bwgyhw.cn/wp-content/uploads/2018/09/bandwagonhost-install-os.png" alt="搬瓦工修改系统版本"></p>
<h2 id="搬瓦工一键开启bbr"><a href="#搬瓦工一键开启bbr" class="headerlink" title="搬瓦工一键开启bbr"></a><strong>搬瓦工一键开启bbr</strong></h2><p>如果你的搬瓦工系统不是自带bbr的，那么也可以一键开启bbr加速。开启bbr加速前，请确认你的搬瓦工架构是kvm的，因为bbr加速是内核加速，只支持kvm，kvm与ovz的区别可以参考：</p>
<blockquote>
<p><a href="https://www.bwgyhw.cn/bandwagonhost-ovz-kvm-comparison/" target="_blank" rel="noopener">搬瓦工OVZ(OpenVZ)与KVM区别，两者应该选哪个好</a></p>
</blockquote>
<p>ssh登陆搬瓦工vps后，运行以下脚本即可升级系统并开启bbr加速（因为bbr只有高版本的LInux内核才支持，所以这个脚本会先下载最新内核之后再开启bbr加速）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; .&#x2F;bbr.sh</span></pre></td></tr></table></figure>

<p>升级内核并开启bbr加速后，会提示重启系统，输入y即可（或者之后用reboot命令重启你的搬瓦工vps），重启完毕后，你的搬瓦工vps就成功开启bbr加速了，查看是否成功开启，可以执行如下命令（需要重新ssh登陆你的搬瓦工vps）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span></pre></td></tr></table></figure>

<p>如果返回值里有bbr就表示成功开启了，形如（只要后面有bbr就可以）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control &#x3D; reno cubic bbr</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>v2ray</tag>
        <tag>bbr</tag>
      </tags>
  </entry>
  <entry>
    <title>安装V2ray</title>
    <url>/2019/12/04/%E5%AE%89%E8%A3%85V2ray/</url>
    <content><![CDATA[<p>V2ray</p>
 <a id="more"></a> 

<p><a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">来源</a></p>
<h3 id="安装或卸载"><a href="#安装或卸载" class="headerlink" title="安装或卸载"></a>安装或卸载</h3><blockquote>
<p>温馨提醒，此脚本默认屏蔽一些不友好的网站！(仅限轮子相关)</p>
</blockquote>
<p>要求：Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统<br>推荐使用 Debian 9 系统，脚本会自动启用 BBR 优化。<br>备注：不推荐使用 Debian 8 系统，因为 Caddy 申请证书可能会出现一些莫名其妙的问题<br><strong>我们推荐使用 <a href="https://on.affpass.com/go/bwg" target="_blank" rel="noopener">搬瓦工VPS</a>，稳定，快速，针对中国线路专门优化，无须担心跑路，服务好，并且支持退款。<br>在这里可以找到 <a href="https://233vps.com/post/bandwagonhost-plans/" target="_blank" rel="noopener">搬瓦工 VPS 套餐大全 </a>，优惠码在这里： <a href="https://233vps.com/post/bandwagonhost-coupon-code/" target="_blank" rel="noopener">搬瓦工 VPS 优惠码 </a></strong><br>使用 root 用户输入下面命令安装或卸载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span></pre></td></tr></table></figure>

<blockquote>
<p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装好 curl 之后就能安装脚本了</p>
</blockquote>
<p>备注：安装完成后，输入 <code>v2ray</code> 即可管理 V2Ray<br>如果提示你的系统不支持此脚本，那么请尝试更换系统</p>
<h2 id="快速管理"><a href="#快速管理" class="headerlink" title="快速管理"></a>快速管理</h2><p><code>v2ray info</code> 查看 V2Ray 配置信息<br><code>v2ray config</code> 修改 V2Ray 配置<br><code>v2ray link</code> 生成 V2Ray 配置文件链接<br><code>v2ray infolink</code> 生成 V2Ray 配置信息链接<br><code>v2ray qr</code> 生成 V2Ray 配置二维码链接<br><code>v2ray ss</code> 修改 Shadowsocks 配置<br><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息<br><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接<br><code>v2ray status</code> 查看 V2Ray 运行状态<br><code>v2ray start</code> 启动 V2Ray<br><code>v2ray stop</code> 停止 V2Ray<br><code>v2ray restart</code> 重启 V2Ray<br><code>v2ray log</code> 查看 V2Ray 运行日志<br><code>v2ray update</code> 更新 V2Ray<br><code>v2ray update.sh</code> 更新 V2Ray 管理脚本<br><code>v2ray uninstall</code> 卸载 V2Ray</p>
<h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><p>V2Ray 配置文件路径：/etc/v2ray/config.json<br>Caddy 配置文件路径：/etc/caddy/Caddyfile<br>脚本配置文件路径: /etc/v2ray/233blog_v2ray_backup.conf</p>
<blockquote>
<p>警告，请不要修改脚本配置文件，免得出错。。<br>如果你不是有特别的需求，也不要修改 V2Ray 配置文件<br>不过也没事，若你实在想要瞎折腾，出错了的话，你就卸载，然后重装，再出错 ，再卸载，再重装，重复到自己不再想折腾为止。。</p>
</blockquote>
<h2 id="WS-TLS-HTTP2"><a href="#WS-TLS-HTTP2" class="headerlink" title="WS+TLS / HTTP2"></a>WS+TLS / HTTP2</h2><p>如果你使用了这两个协议，那么就会使用了脚本自带的 Caddy 集成<br>不管如何，不建议直接去更改 Caddy 的配置：/etc/caddy/Caddyfile<br>如果你需要配置其他网站相关，请将网站的配置文件放到 /etc/caddy/sites 目录下，然后重启 Caddy 进程即可，脚本默认生成的 Caddy 的配置会加载 /etc/caddy/sites 这个目录下的所有配置文件。<br>所以，请将你的网站配置文件放到 /etc/caddy/sites 目录下，完完全全不需要去更改 /etc/caddy/Caddyfile<br>记得重启 Caddy 进程：service caddy restart</p>
<h2 id="Caddy-插件相关"><a href="#Caddy-插件相关" class="headerlink" title="Caddy 插件相关"></a>Caddy 插件相关</h2><p>本脚本集成了 Caddy，但不集成任何 Caddy 插件，如果你需要安装某些 Caddy 插件，你可以使用官方的 Caddy 安装脚本来一键安装。<br>本人的脚本集成的 Caddy 的安装路径，跟 Caddy 官方的安装脚本是一致的。所以可以直接安装，不会有任何问题</p>
<p>举个例子，安装包含 http.filebrowser 插件的 Caddy，执行如下命令即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://getcaddy.com | bash -s personal http.filebrowser</span></pre></td></tr></table></figure>

<p>你可以在 <a href="https://caddyserver.com/download" target="_blank" rel="noopener">https://caddyserver.com/download</a> 找到 Caddy 更多插件和安装命令。</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>V2Ray 客户端配置文件 SOCKS 监听端口为 <code>2333</code>， HTTP 监听端口为 <code>6666</code><br>可能某些 V2Ray 客户端的选项或描述略有不同，但事实上，此脚本显示的 V2Ray 配置信息已经足够详细，由于客户端的不同，请对号入座。</p>
<h2 id="反馈问题"><a href="#反馈问题" class="headerlink" title="反馈问题"></a>反馈问题</h2><p>请先查阅：<a href="https://233v2.com/post/10/" target="_blank" rel="noopener">V2Ray 一键安装脚本疑问集合</a><br>Telegram 群组：<a href="https://t.me/blog233" target="_blank" rel="noopener"> https://t.me/blog233 </a><br>Github 反馈：<a href="https://github.com/233boy/v2ray/issues" target="_blank" rel="noopener"> https://github.com/233boy/v2ray/issues </a><br>任何有关于 V2Ray 的问题，请自行到 V2Ray 官方反馈。<br><strong>目前只支持配置一个 V2Ray 账号…一个 Shadowsocks 账号。。不支持 SSR。。</strong><br><strong>使用国际大厂的 VPS，请自行在安全组 (防火墙) 开放端口和 UDP 协议 (如果你要使用含有 mKCP 的传输协议)</strong></p>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>为了避免由于不可抗拒的原因所造成本人主动删除脚本，所以建议请将本脚本 Fork 一份<br>备份地址：<a href="https://github.com/233boy/v2ray/fork" target="_blank" rel="noopener"> https://github.com/233boy/v2ray/fork </a><br>安装方法，确保你已经 Fork 了脚本，将 233boy 修改成你的 Github 用户名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/233boy/v2ray -b master</span></pre></td></tr><tr><td class="code"><pre><span class="line">cd v2ray</span></pre></td></tr><tr><td class="code"><pre><span class="line">chmod +x install.sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">./install.sh local</span></pre></td></tr></table></figure>

<p>如果提示 git 命令不可用，那就自己安装咯，不会安装啊？我也不知道啊。哈哈</p>
<h2 id="及时更新脚本"><a href="#及时更新脚本" class="headerlink" title="及时更新脚本"></a>及时更新脚本</h2><p>为确保你能愉快使用，请留意使用 <code>v2ray update.sh</code> 命令来更新管理脚本。<br>脚本难免会有 BUG，所以建议有空就检查一下更新情况。</p>
<h2 id="关注脚本最新动态"><a href="#关注脚本最新动态" class="headerlink" title="关注脚本最新动态"></a>关注脚本最新动态</h2><p>本人会在 <a href="https://t.me/blog2333" target="_blank" rel="noopener">本站 Telegram 公告频道</a> 推送脚本最新动态相关，如果你使用 Telegram 的话，可以关注一下。<br>当然啦，你也可以加入 <a href="https://t.me/blog233" target="_blank" rel="noopener">本站 Telegram 群组</a> 来吹水。</p>
<h2 id="资助-V2Ray"><a href="#资助-V2Ray" class="headerlink" title="资助 V2Ray"></a>资助 V2Ray</h2><p>如果你觉得 V2Ray 很好用，能解决你的某些问题，请考虑 <a href="https://www.v2ray.com/chapter_00/02_donate.html" target="_blank" rel="noopener">资助 V2Ray 发展 </a>。</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>V2Ray：<a href="https://www.v2ray.com/" target="_blank" rel="noopener"> https://www.v2ray.com/</a></p>
<h2 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h2><p>此脚本使用 GPL v3 协议共享。</p>
<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>如果觉得脚本好用，记得分享给你的其他小伙伴们哦~</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>请勿违反国家法律法规，否则后果自负！<br>使用一键脚本并不会害了你，并且会让你节省大量的时间，工具从来都是为了更快的解决问题。</p>
]]></content>
      <tags>
        <tag>V2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>代码格式</title>
    <url>/2019/12/03/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>查看代码格式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world"</span>&lt;&lt;<span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
</search>
